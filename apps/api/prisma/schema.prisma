generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./ERD"
  outputName = "ERD"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Region {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Neighborhood {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Feature {
  id          Int               @id @default(autoincrement())
  name        String
  type        String            // 'INFRASTRUCTURE' or 'BUILDING'
  properties  PropertyFeature[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Property {
  id               String            @id @default(cuid())
  title            String
  description      String
  price            Float
  currency         String            @default("BGN")
  area_sqm         Float
  land_area_sqm    Float?
  floor            Int?
  total_floors     Int?
  construction_type String?
  furnishing       String?
  /// Valid values: 'CITY', 'SUBURB', 'VILLAGE', 'SEASIDE', 'MOUNTAIN'
  /// @see packages/shared-types/src/property/enums.ts
  location_type    String            @default("CITY")
  region           Region?           @relation(fields: [regionId], references: [id])
  regionId         Int?
  neighborhood     Neighborhood?     @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId   Int?
  has_regulation   Boolean?
  category         String            @default("SALE")
  type             String            @default("APARTMENT")
  featured         Boolean           @default(false)
  images           Image[]
  contact_info     ContactInfo?
  features         PropertyFeature[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([category])
  @@index([type])
  @@index([regionId])
  @@index([neighborhoodId])
}

model PropertyFeature {
  propertyId String
  featureId  Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  feature    Feature  @relation(fields: [featureId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([propertyId, featureId])
}

model Image {
  id         String   @id @default(cuid())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ContactInfo {
  id         String   @id @default(cuid())
  phone      String
  email      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 
